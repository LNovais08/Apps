from typing import Iterator, Optional

import lief.pdb # type: ignore
import lief.pdb.types # type: ignore

class Array(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...

class Attribute:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def field_offset(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> Optional[lief.pdb.Type]: ...

class BitField(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...

class Class(ClassLike):
    def __init__(self, *args, **kwargs) -> None: ...

class ClassLike(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def attributes(self) -> Iterator[Optional[lief.pdb.types.Attribute]]: ...
    @property
    def methods(self) -> Iterator[Optional[lief.pdb.types.Method]]: ...
    @property
    def name(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def unique_name(self) -> str: ...

class Enum(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...

class Function(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...

class Interface(ClassLike):
    def __init__(self, *args, **kwargs) -> None: ...

class Method:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...

class Modifier(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def underlying_type(self) -> Optional[lief.pdb.Type]: ...

class Pointer(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def underlying_type(self) -> Optional[lief.pdb.Type]: ...

class Simple(lief.pdb.Type):
    def __init__(self, *args, **kwargs) -> None: ...

class Structure(ClassLike):
    def __init__(self, *args, **kwargs) -> None: ...

class Union(ClassLike):
    def __init__(self, *args, **kwargs) -> None: ...
